{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","memo","todos","selectedTodoId","onSelectTodoId","className","map","todo","id","completed","cn","title","type","onClick","TodoFilter","onSelectFilter","filter","onFilter","query","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","onClose","useState","user","setUser","isUserLoading","setIsUserLoading","isUserError","setIsUserError","useEffect","userId","catch","finally","href","email","name","App","setTodos","setSelectedTodoId","setFilter","setQuery","isTodosLoading","setIsTodosLoading","isTodosError","setIsTodosError","selectFilter","useCallback","setFilterQuery","selectTodoId","todoId","closeTodoModal","normalizedQuery","toLowerCase","split","Boolean","join","visibleTodos","useMemo","isSearchQueryMatch","includes","isStatusMatch","selectedTodo","find","isNoFiltredTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.646c1006.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React, { memo } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onSelectTodoId: (todoId: number) => void;\n  selectedTodoId: number;\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos, selectedTodoId, onSelectTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr data-cy=\"todo\" key={todo.id}>\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={cn({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSelectTodoId(todo.id)}\n            >\n              <span className=\"icon\">\n                <i className={`far fa-eye${selectedTodoId === todo.id ? '-slash' : ''}`} />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n));\n","import { memo } from 'react';\n\ninterface Props {\n  onSelectFilter: (status: string) => void;\n  filter: string;\n  onFilter: (value: string) => void;\n  query: string;\n}\n\nexport const TodoFilter: React.FC<Props> = memo(({\n  onSelectFilter,\n  filter,\n  onFilter,\n  query,\n}) => {\n  const handleChangeFilterQuery = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => onFilter(event.target.value);\n\n  const handleChangeStatus = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => onSelectFilter(event.target.value);\n\n  const handleClickResetFilter = () => onFilter('');\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter}\n            onChange={handleChangeStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeFilterQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClickResetFilter}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { memo, useEffect, useState } from 'react';\n\nimport { getUser } from '../../api';\n\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  todo: Todo;\n  onClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = memo(({ todo, onClose }) => {\n  const [user, setUser] = useState<User>();\n  const [isUserLoading, setIsUserLoading] = useState(false);\n  const [isUserError, setIsUserError] = useState(false);\n\n  useEffect(() => {\n    setIsUserLoading(true);\n\n    getUser(todo.userId)\n      .then(setUser)\n      .catch(() => setIsUserError(true))\n      .finally(() => setIsUserLoading(false));\n  }, [todo.userId]);\n\n  const handleClickCloseModal = () => onClose();\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleClickCloseModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n\n                {todo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n\n      {isUserError && (\n        <p className=\"has-text-danger\">Can not load user</p>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState<number>(0);\n  const [filter, setFilter] = useState('all');\n  const [query, setQuery] = useState('');\n  const [isTodosLoading, setIsTodosLoading] = useState(false);\n  const [isTodosError, setIsTodosError] = useState(false);\n\n  useEffect(() => {\n    setIsTodosLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .catch(() => setIsTodosError(true))\n      .finally(() => setIsTodosLoading(false));\n  }, []);\n\n  const selectFilter = useCallback((value: string) => {\n    setFilter(value);\n  }, []);\n\n  const setFilterQuery = useCallback((value: string) => {\n    setQuery(value);\n  }, []);\n\n  const selectTodoId = useCallback((todoId: number) => {\n    setSelectedTodoId(todoId);\n  }, []);\n\n  const closeTodoModal = useCallback(() => {\n    setSelectedTodoId(0);\n  }, []);\n\n  const normalizedQuery = query\n    .toLowerCase()\n    .split(' ')\n    .filter(Boolean)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    .join(' ');\n\n  const visibleTodos = useMemo<Todo[]>(() => {\n    return todos.filter(todo => {\n      const normalizedTodoTitle = todo.title.toLowerCase();\n      const isSearchQueryMatch = normalizedTodoTitle.includes(normalizedQuery);\n\n      let isStatusMatch = true;\n\n      switch (filter) {\n        case 'active':\n          isStatusMatch = !todo.completed;\n          break;\n\n        case 'completed':\n          isStatusMatch = todo.completed;\n          break;\n\n        default:\n          isStatusMatch = true;\n      }\n\n      return isSearchQueryMatch && isStatusMatch;\n    });\n  }, [filter, normalizedQuery, todos]);\n\n  const selectedTodo = useMemo(() => visibleTodos.find(\n    todo => todo.id === selectedTodoId,\n  ), [selectedTodoId, visibleTodos]);\n\n  const isNoFiltredTodos = query && !visibleTodos.length;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSelectFilter={selectFilter}\n                filter={filter}\n                onFilter={setFilterQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isTodosLoading\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    onSelectTodoId={selectTodoId}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )\n                : <Loader />}\n\n              {isTodosError && (\n                <p className=\"has-text-danger\">Can not load todos.</p>\n              )}\n\n              {isNoFiltredTodos && (\n                <p\n                  className=\"has-text-danger\"\n                >\n                  no matched todos\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} onClose={closeTodoModal} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}